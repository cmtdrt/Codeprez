#!/usr/bin/env node

/**
 * Script de test pour v√©rifier la cr√©ation et validation d'archives .codeprez
 * Ce script test le workflow complet selon le cahier des charges
 */

import fs from 'fs';
import path from 'path';
import AdmZip from 'adm-zip';
import { fileURLToPath } from 'url';

// Pour obtenir __dirname en ESM
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Configuration
const EXAMPLE_PRES_PATH = path.join(__dirname, 'example-pres');
const TEST_ARCHIVE_PATH = path.join(__dirname, 'test-presentation.codeprez');

// Fichiers et dossiers requis selon le cahier des charges
const REQUIRED_FILES = {
    'presentation.md': 'Fichier de pr√©sentation principal',
    'style.css': 'Fichier de styles CSS',
    'config.json': 'Configuration de la pr√©sentation'
};

const OPTIONAL_FOLDERS = {
    'assets': 'Dossier des ressources (images, etc.)',
    'env': 'Dossier de l\'environnement d\'ex√©cution'
};

/**
 * Cr√©e une archive .codeprez √† partir du dossier example-pres
 */
function createCodeprezArchive() {
    console.log('üî® Cr√©ation de l\'archive .codeprez...');

    try {
        const zip = new AdmZip();

        // Ajouter r√©cursivement tous les fichiers du dossier exemple
        zip.addLocalFolder(EXAMPLE_PRES_PATH, 'example-pres');

        // √âcrire l'archive
        zip.writeZip(TEST_ARCHIVE_PATH);

        console.log('‚úÖ Archive cr√©√©e:', TEST_ARCHIVE_PATH);
        console.log('üì¶ Taille:', fs.statSync(TEST_ARCHIVE_PATH).size, 'bytes');

        return true;
    } catch (error) {
        console.error('‚ùå Erreur lors de la cr√©ation de l\'archive:', error.message);
        return false;
    }
}

/**
 * Valide le contenu d'une archive .codeprez
 */
function validateCodeprezArchive(archivePath) {
    console.log('üîç Validation de l\'archive .codeprez...');

    try {
        const zip = new AdmZip(archivePath);
        const entries = zip.getEntries();

        console.log('üìã Contenu de l\'archive:');
        entries.forEach(entry => {
            console.log(`  ${entry.isDirectory ? 'üìÅ' : 'üìÑ'} ${entry.entryName}`);
        });

        // V√©rifier les fichiers requis
        console.log('\n‚úÖ V√©rification des fichiers requis:');
        let allRequiredPresent = true;

        for (const [fileName, description] of Object.entries(REQUIRED_FILES)) {
            const found = entries.some(entry =>
                entry.entryName.endsWith('/' + fileName) || entry.entryName === fileName
            );

            if (found) {
                console.log(`  ‚úÖ ${fileName} - ${description}`);
            } else {
                console.log(`  ‚ùå ${fileName} - ${description} (MANQUANT)`);
                allRequiredPresent = false;
            }
        }

        // V√©rifier les dossiers optionnels
        console.log('\nüìÅ V√©rification des dossiers optionnels:');
        for (const [folderName, description] of Object.entries(OPTIONAL_FOLDERS)) {
            const found = entries.some(entry =>
                entry.isDirectory && entry.entryName.includes(folderName + '/')
            );

            if (found) {
                console.log(`  ‚úÖ ${folderName}/ - ${description}`);
            } else {
                console.log(`  ‚ö†Ô∏è  ${folderName}/ - ${description} (ABSENT)`);
            }
        }

        // V√©rifier le contenu des fichiers requis
        console.log('\nüîç V√©rification du contenu:');

        // V√©rifier config.json
        const configEntry = entries.find(entry => entry.entryName.endsWith('config.json'));
        if (configEntry) {
            try {
                const configContent = zip.readAsText(configEntry);
                const config = JSON.parse(configContent);

                if (config.title && config.authors && config.duration) {
                    console.log('  ‚úÖ config.json - Format valide');
                    console.log(`    - Titre: "${config.title}"`);
                    console.log(`    - Auteurs: ${config.authors.join(', ')}`);
                    console.log(`    - Dur√©e: ${config.duration} min`);
                } else {
                    console.log('  ‚ùå config.json - Format invalide (propri√©t√©s manquantes)');
                    allRequiredPresent = false;
                }
            } catch (error) {
                console.log('  ‚ùå config.json - JSON invalide:', error.message);
                allRequiredPresent = false;
            }
        }

        // V√©rifier presentation.md
        const presentationEntry = entries.find(entry => entry.entryName.endsWith('presentation.md'));
        if (presentationEntry) {
            const presentationContent = zip.readAsText(presentationEntry);
            const slideCount = (presentationContent.match(/^---$/gm) || []).length + 1;
            console.log(`  ‚úÖ presentation.md - ${slideCount} slides d√©tect√©es`);

            // V√©rifier les r√©f√©rences d'images
            const imageRefs = presentationContent.match(/!\[.*?\]\(\.\/assets\/.*?\)/g) || [];
            if (imageRefs.length > 0) {
                console.log(`    - ${imageRefs.length} r√©f√©rence(s) d'image(s) d√©tect√©e(s)`);
                imageRefs.forEach(ref => {
                    console.log(`      ${ref}`);
                });
            }

            // V√©rifier les blocs de code
            const codeBlocks = presentationContent.match(/```[\s\S]*?```/g) || [];
            if (codeBlocks.length > 0) {
                console.log(`    - ${codeBlocks.length} bloc(s) de code d√©tect√©(s)`);
            }
        }

        return allRequiredPresent;

    } catch (error) {
        console.error('‚ùå Erreur lors de la validation:', error.message);
        return false;
    }
}

/**
 * Simule le processus de chargement dans Electron
 */
function simulateElectronProcessing(archivePath) {
    console.log('\nüîß Simulation du traitement Electron...');

    try {
        const zip = new AdmZip(archivePath);
        const tempPath = path.join(__dirname, 'temp-test-extraction');

        // Nettoyer le dossier temporaire s'il existe
        if (fs.existsSync(tempPath)) {
            fs.rmSync(tempPath, { recursive: true, force: true });
        }

        // Extraire l'archive
        zip.extractAllTo(tempPath, true);

        console.log('‚úÖ Archive extraite dans:', tempPath);

        // Chercher le dossier de pr√©sentation
        const items = fs.readdirSync(tempPath);
        let presentationPath = null;

        for (const item of items) {
            const itemPath = path.join(tempPath, item);
            if (fs.statSync(itemPath).isDirectory()) {
                if (fs.existsSync(path.join(itemPath, 'presentation.md'))) {
                    presentationPath = itemPath;
                    break;
                }
            }
        }

        if (presentationPath) {
            console.log('‚úÖ Dossier de pr√©sentation trouv√©:', presentationPath);

            // V√©rifier la structure
            const hasPresentation = fs.existsSync(path.join(presentationPath, 'presentation.md'));
            const hasConfig = fs.existsSync(path.join(presentationPath, 'config.json'));
            const hasStyle = fs.existsSync(path.join(presentationPath, 'style.css'));
            const hasAssets = fs.existsSync(path.join(presentationPath, 'assets'));
            const hasEnv = fs.existsSync(path.join(presentationPath, 'env'));

            console.log('üìã Structure extraite:');
            console.log(`  ${hasPresentation ? '‚úÖ' : '‚ùå'} presentation.md`);
            console.log(`  ${hasConfig ? '‚úÖ' : '‚ùå'} config.json`);
            console.log(`  ${hasStyle ? '‚úÖ' : '‚ùå'} style.css`);
            console.log(`  ${hasAssets ? '‚úÖ' : '‚ö†Ô∏è '} assets/`);
            console.log(`  ${hasEnv ? '‚úÖ' : '‚ö†Ô∏è '} env/`);

            // Nettoyer
            fs.rmSync(tempPath, { recursive: true, force: true });
            console.log('üßπ Dossier temporaire nettoy√©');

            return hasPresentation && hasConfig && hasStyle;
        } else {
            console.log('‚ùå Aucun dossier de pr√©sentation valide trouv√©');
            fs.rmSync(tempPath, { recursive: true, force: true });
            return false;
        }

    } catch (error) {
        console.error('‚ùå Erreur lors de la simulation:', error.message);
        return false;
    }
}

/**
 * Fonction principale de test
 */
function runTests() {
    console.log('üß™ === TEST DE CR√âATION D\'ARCHIVE .CODEPREZ ===\n');

    // V√©rifier que le dossier exemple existe
    if (!fs.existsSync(EXAMPLE_PRES_PATH)) {
        console.log('‚ùå Le dossier example-pres n\'existe pas');
        process.exit(1);
    }

    console.log('üìÅ Dossier source:', EXAMPLE_PRES_PATH);
    console.log('üì¶ Archive cible:', TEST_ARCHIVE_PATH);
    console.log();

    // Nettoyer l'archive existante
    if (fs.existsSync(TEST_ARCHIVE_PATH)) {
        fs.unlinkSync(TEST_ARCHIVE_PATH);
        console.log('üßπ Archive existante supprim√©e\n');
    }

    let success = true;

    // Test 1: Cr√©er l'archive
    if (!createCodeprezArchive()) {
        success = false;
    }

    console.log();

    // Test 2: Valider l'archive
    if (!validateCodeprezArchive(TEST_ARCHIVE_PATH)) {
        success = false;
    }

    console.log();

    // Test 3: Simuler le traitement Electron
    if (!simulateElectronProcessing(TEST_ARCHIVE_PATH)) {
        success = false;
    }

    console.log('\nüèÅ === R√âSULTATS DES TESTS ===');

    if (success) {
        console.log('‚úÖ Tous les tests sont pass√©s avec succ√®s !');
        console.log('‚úÖ La cr√©ation d\'archive .codeprez fonctionne correctement');
        console.log('‚úÖ L\'archive respecte le cahier des charges');
    } else {
        console.log('‚ùå Certains tests ont √©chou√©');
        console.log('‚ùå Des am√©liorations sont n√©cessaires');
    }

    // Garder l'archive pour inspection manuelle
    console.log(`\nüì¶ Archive de test conserv√©e: ${TEST_ARCHIVE_PATH}`);
    console.log('üí° Vous pouvez tester manuellement en important cette archive dans l\'application');

    return success;
}

// Ex√©cuter les tests directement
const success = runTests();
process.exit(success ? 0 : 1);

export { runTests, createCodeprezArchive, validateCodeprezArchive };
